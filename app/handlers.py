from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from datetime import datetime


import app.keyboards as kb
import app.database.requests as rq

router = Router()


# /start
@router.message(CommandStart())
async def start(message: Message):
    user_exist = await rq.check_user_exists(message.from_user.id)
    if user_exist == 1:
        await message.reply('–¢—ã —É–∂–µ –Ω–∞–∂–∏–º–∞–ª –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É!', reply_markup=kb.main)
    else:
        await rq.add_user(message.from_user.id)     # creating user blank subjects list
        await message.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏.'
                            '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å —Ç—Ä–µ–∫–∞—Ç—å', 
                            reply_markup=kb.register)
        await message.answer('–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä"', reply_markup=kb.register)


# register
@router.message(Command('register'))
async def register(message: Message):
    user_exist = await rq.check_user_exists(message.from_user.id)
    if user_exist == 1:
        await message.answer('–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã?', reply_markup=kb.yes_no)
    else:
        await rq.add_user(message.from_user.id)     # creating user blank subjects list
        await message.answer('–£–≤–µ—Ä–µ–Ω?', reply_markup=kb.yes_no)


@router.callback_query(F.data == 'yes')
async def yes(query: CallbackQuery):
    await query.message.answer('–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å —Ç—Ä–µ–∫–∞—Ç—å', reply_markup=kb.accept)
    await query.message.answer('–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä"', reply_markup=kb.register)
    await rq.reset_all_subjects(query.from_user.id)
    await query.answer('‚úÖ')
    await query.message.edit_text('‚úÖ –î–∞')


@router.callback_query(F.data == 'no')
async def no(query: CallbackQuery):
    await query.answer('‚ùå')
    await query.message.edit_text('‚ùå –ù–µ—Ç')
    await query.message.answer('–ü—Ä–æ–¥–æ–ª–∂–∏–º...', reply_markup=kb.main)


@router.message(F.text == 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä')
async def save_and_end(message: Message):
    await message.answer('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', reply_markup=kb.main)


@router.message(F.text == 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –º–æ–π –≤—ã–±–æ—Ä')
async def clear(message: Message):
    await rq.reset_all_subjects(message.from_user.id)
    await message.reply('–í—ã–±–æ—Ä –æ—á–∏—â–µ–Ω', reply_markup=kb.register)


# =====================================================================================================

# /help
@router.message(Command('help'))
async def help(message: Message):
    await message.answer('–ü–æ–º–æ—â—å')

# /menu
@router.message(Command('menu'))
async def menu(message: Message):
    await message.answer('–ú–µ–Ω—é üëá', reply_markup=kb.main)

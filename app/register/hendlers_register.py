from asyncio import sleep
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

import app.register.keyboard_register as kbr
import app.database.requests_register as rqr
import app.keyboards as kb
from app.register.states_register import RegisterSubjects


router_register = Router()


# /start
@router_register.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()
    user_exist = await rqr.check_user_started(message.from_user.id)
    if user_exist == 0:
        await rqr.guest(message.from_user.id)     # add user to guest db

    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}! üòä\n'
        '–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –ø–æ –ø—Ä–æ–±–Ω–∏–∫–∞–º –ï–ì–≠. üìöüìà\n'
        '–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å, –Ω–∞–∂–º–∏ üëâ /help\n\n'
        '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –¥–æ–±–∞–≤—å –ø—Ä–µ–¥–º–µ—Ç—ã, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å. üìùüìö'
        '–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–µ–º–µ—Ç—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Åüßê –∏–ª–∏ –ø–æ—Ç–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤".'
                        , reply_markup=kb.main)
        
    await sleep(1.5)  # delay 1.5 seconds
    await message.answer('–ì–æ—Ç–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã —Å–µ–π—á–∞—Å?', reply_markup=kb.yes_no)


# register
@router_register.message(F.text == 'üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤')
@router_register.message(Command('register'))
async def register(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–•–æ—á–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤?', reply_markup=kb.yes_no)
    

@router_register.callback_query(F.data == 'yes')
async def yes(query: CallbackQuery, state: FSMContext):
    await state.clear()

    sent_message = await query.message.answer(f'–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤—ã–±—Ä–∞–ª üìÉ:\n–ü–æ–∫–∞ –∑–¥–µ—Å—å –ø—É—Å—Ç–æ', reply_markup=kbr.reister)
    message_id = sent_message.message_id
    await state.update_data(keyboard_id=message_id)
    await query.message.answer('–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä"', reply_markup=kbr.accept)
    await query.answer('‚úÖ')
    await query.message.edit_text('‚úÖ –î–∞')
    await state.set_state(RegisterSubjects.subjects)      #register starting


@router_register.callback_query(F.data == 'no')
async def no(query: CallbackQuery, state: FSMContext):
    await state.clear()
    await query.answer('‚ùå')
    await query.message.edit_text('‚ùå –ù–µ—Ç')
    await query.message.answer('–õ–∞–¥–Ω–æ üëÄ', reply_markup=kb.main)


from main import bot
@router_register.message(F.text == 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä')
async def save_and_end(message: Message, state: FSMContext):
    if await state.get_state() == RegisterSubjects.subjects:
        data = await state.get_data()
        message_id = int(data.get("keyboard_id"))
        await rqr.reset_all_subjects(message.from_user.id)

        try: 
            user_subjects = data["subjects"]
        except KeyError:
            user_subjects = []
        
        if len(user_subjects) == 0:
            await message.answer('–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç!')
            return

        await bot.edit_message_reply_markup(chat_id=int(message.chat.id), message_id=message_id, reply_markup=None)

        await message.answer('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', reply_markup=kb.main)
        await rqr.add_user_subjects(message.from_user.id, user_subjects)
        await state.clear()      #register ending


@router_register.message(F.text == 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –º–æ–π –≤—ã–±–æ—Ä')
async def clear(message: Message, state: FSMContext):
    if await state.get_state() == RegisterSubjects.subjects:
        await state.update_data(subjects=[])
        
        await message.reply('–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω!\n'
                            '–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å')
    else:
        await state.clear()
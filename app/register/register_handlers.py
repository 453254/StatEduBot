from asyncio import sleep
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from datetime import datetime

import app.register.register_keyboard as kbr
import app.database.register_requests as rqr    # idk why it marked yellow, its work
from app.keyboards import main
import app.database.requests as rq

router_register = Router()


# /start
@router_register.message(CommandStart())
async def start(message: Message):
    user_exist = await rqr.check_user_started(message.from_user.id)
    if user_exist == 1:
        await message.answer('–¢—ã —É–∂–µ –Ω–∞–∂–∏–º–∞–ª –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É!', reply_markup=main)
    else:
        await rqr.guest(message.from_user.id, datetime.now())     # creating guest
        await rqr.add_user(message.from_user.id)     # creating user blank subjects list
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}! üòä\n'
                            '–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –ø–æ –ø—Ä–æ–±–Ω–∏–∫–∞–º –ï–ì–≠. üìöüìà\n'
                            '–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å, –Ω–∞–∂–º–∏ üëâ /help\n\n'
                            '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –¥–æ–±–∞–≤—å –ø—Ä–µ–¥–º–µ—Ç—ã, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å. üìùüìö')
        
        await sleep(1.5)  # delay 1.5 seconds
        await message.answer('–ì–æ—Ç–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã —Å–µ–π—á–∞—Å?', reply_markup=kbr.yes_no)


# register
@router_register.message(F.text == 'üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤')
@router_register.message(Command('register'))
async def register(message: Message):
    user_exist = await rq.check_user_registrasted(message.from_user.id)
    if user_exist == False:
        await rqr.add_user(message.from_user.id)     # creating user blank subjects list
    await message.answer(f'–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤—ã–±—Ä–∞–ª üìÉ:\n{await rq.get_active_subjects_for_user(message.from_user.id)}'
                               , reply_markup=kbr.register)
    await message.answer('–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä"', reply_markup=kbr.accept)
    

@router_register.callback_query(F.data == 'yes')
async def yes(query: CallbackQuery):
    await query.message.answer(f'–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤—ã–±—Ä–∞–ª üìÉ:\n{await rq.get_active_subjects_for_user(query.from_user.id)}'
                               , reply_markup=kbr.register)
    await query.message.answer('–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä"', reply_markup=kbr.accept)
    await query.answer('‚úÖ')
    await query.message.edit_text('‚úÖ –î–∞')


@router_register.callback_query(F.data == 'no')
async def no(query: CallbackQuery):
    await query.answer('‚ùå')
    await query.message.edit_text('‚ùå –ù–µ—Ç')
    await query.message.answer('–ö–∞–∫ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –∂–º–∏\n "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤" üëÄ', reply_markup=main)


@router_register.message(F.text == 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–±–æ—Ä')
async def save_and_end(message: Message):
    await message.answer('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', reply_markup=main)


@router_register.message(F.text == 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –º–æ–π –≤—ã–±–æ—Ä')
async def clear(message: Message):
    await rqr.reset_all_subjects(message.from_user.id)
    await message.reply('–í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω')